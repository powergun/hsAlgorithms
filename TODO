TODO: first principles: fold list chapter

TODO: data structures and algorithms, in Haskell
http://okmij.org/ftp/Haskell/AlgorithmsH.html

TODO: Okasaki's Purely Functional Data Structures

TODO: quicksort:
https://medium.com/better-programming/quicksort-with-haskell-75cb07ec57f3

TODO: github:
https://github.com/graninas/Haskell-Algorithms

TODO: containers library
https://buildmedia.readthedocs.org/media/pdf/haskell-containers/latest/haskell-containers.pdf

TODO: to read:
PURELY FUNCTIONAL DATA STRUCTURES

TODO: finger tree
https://chrispenner.ca/posts/intro-to-finger-trees

TODO: zipper (zipper monad)
https://wiki.haskell.org/Zipper

1. Criterion tutorial; Bryan Oâ€™Sullivan
http://www.serpentine.com/criterion/tutorial.html
2. Demystifying DList; Tom Ellis
http://h2.jaguarpaw.co.uk/posts/demystifying-dlist/
3. Memory Management; GHC; Haskell Wiki
https://wiki.haskell.org/GHC/Memory_Management
4. Performance; Haskell Wiki
https://wiki.haskell.org/Performance
5. Pragmas, specifically UNPACK; GHC Documentation
6. High Performance Haskell; Johan Tibell
http://johantibell.com/files/slides.pdf
7. Haskell Performance Patterns; Johan Tibell
8. Faster persistent data structures through hashing; Johan Tibell
9. Lazy Functional State Threads; John Launchbury and Simon Peyton Jones
10. Write Haskell as fast as C: exploiting strictness, laziness and recursion; Don Stewart
11. Haskell as fast as C: A case study; Jan Stolarek
12. Haskell FFT 11: Optimisation Part 1; Ian Ross
13. Understanding the RealWorld; Edsko de Vries
14. Stream Fusion; Duncan Coutts
http://code.haskell.org/~dons/papers/icfp088-coutts.pdf
